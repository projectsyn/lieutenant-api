// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Unstructured key value map containing arbitrary metadata
type Annotations map[string]interface{}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties `yaml:",inline"`
}

// Facts about a cluster object. Statically configured key/value pairs.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A cluster defition object.
// The Git repository is usually managed by the API and autogenerated.
// The sshDeployKey will be managed by Steward
type ClusterProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Git revision to use with the tenant configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	TenantGitRepoRevision *string `json:"tenantGitRepoRevision,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// Configuration Git repository, usually generated by the API
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type Id string

// Inventory data of a cluster
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// A reason for responses
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Revision defines model for Revision.
type Revision struct {

	// Revision to use with a git repository.
	Revision *string `json:"revision,omitempty"`
}

// RevisionedGitRepo defines model for RevisionedGitRepo.
type RevisionedGitRepo struct {
	// Embedded struct due to allOf(#/components/schemas/GitRepo)
	GitRepo `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/Revision)
	Revision `yaml:",inline"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties `yaml:",inline"`
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A tenant definition object.
// The Git repository is usually managed by the API and autogenerated.
// All properties except name are optional on creation.
type TenantProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display name of the tenant
	DisplayName *string            `json:"displayName,omitempty"`
	GitRepo     *RevisionedGitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// Full URL of the global configuration git repo
	GlobalGitRepoURL *string `json:"globalGitRepoURL,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type ClusterIdParameter Id

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type TenantIdParameter Id

// A reason for responses
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody Cluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody Tenant

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryJSONRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantJSONRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clusters", wrapper.ListClusters)
	router.POST(baseURL+"/clusters", wrapper.CreateCluster)
	router.DELETE(baseURL+"/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET(baseURL+"/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH(baseURL+"/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET(baseURL+"/docs", wrapper.Docs)
	router.GET(baseURL+"/healthz", wrapper.Healthz)
	router.GET(baseURL+"/install/steward.json", wrapper.InstallSteward)
	router.GET(baseURL+"/inventory", wrapper.QueryInventory)
	router.POST(baseURL+"/inventory", wrapper.UpdateInventory)
	router.GET(baseURL+"/openapi.json", wrapper.Openapi)
	router.GET(baseURL+"/tenants", wrapper.ListTenants)
	router.POST(baseURL+"/tenants", wrapper.CreateTenant)
	router.DELETE(baseURL+"/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET(baseURL+"/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH(baseURL+"/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
