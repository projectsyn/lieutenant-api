// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Unstructured key value map containing arbitrary metadata
type Annotations map[string]interface{}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties `yaml:",inline"`
}

// Facts about a cluster object. Statically configured key/value pairs.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A cluster defition object.
// The Git repository is usually managed by the API and autogenerated.
// The sshDeployKey will be managed by Steward
type ClusterProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Dynamic facts about a cluster object. Are periodically udpated by Project Syn and should not be set manually.
	DynamicFacts *DynamicClusterFacts `json:"dynamicFacts,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Git revision to use with the tenant configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	TenantGitRepoRevision *string `json:"tenantGitRepoRevision,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// Dynamic facts about a cluster object. Are periodically udpated by Project Syn and should not be set manually.
type DynamicClusterFacts map[string]interface{}

// Configuration Git repository, usually generated by the API
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type Id string

// Inventory data of a cluster
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// A reason for responses
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Revision defines model for Revision.
type Revision struct {

	// Revision to use with a git repository.
	Revision *string `json:"revision,omitempty"`
}

// RevisionedGitRepo defines model for RevisionedGitRepo.
type RevisionedGitRepo struct {
	// Embedded struct due to allOf(#/components/schemas/GitRepo)
	GitRepo `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/Revision)
	Revision `yaml:",inline"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties `yaml:",inline"`
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A tenant definition object.
// The Git repository is usually managed by the API and autogenerated.
// All properties except name are optional on creation.
type TenantProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display name of the tenant
	DisplayName *string            `json:"displayName,omitempty"`
	GitRepo     *RevisionedGitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// Full URL of the global configuration git repo
	GlobalGitRepoURL *string `json:"globalGitRepoURL,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type ClusterIdParameter Id

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type TenantIdParameter Id

// A reason for responses
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody Cluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody Tenant

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryJSONRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantJSONRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clusters", wrapper.ListClusters)
	router.POST(baseURL+"/clusters", wrapper.CreateCluster)
	router.DELETE(baseURL+"/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET(baseURL+"/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH(baseURL+"/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET(baseURL+"/docs", wrapper.Docs)
	router.GET(baseURL+"/healthz", wrapper.Healthz)
	router.GET(baseURL+"/install/steward.json", wrapper.InstallSteward)
	router.GET(baseURL+"/inventory", wrapper.QueryInventory)
	router.POST(baseURL+"/inventory", wrapper.UpdateInventory)
	router.GET(baseURL+"/openapi.json", wrapper.Openapi)
	router.GET(baseURL+"/tenants", wrapper.ListTenants)
	router.POST(baseURL+"/tenants", wrapper.CreateTenant)
	router.DELETE(baseURL+"/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET(baseURL+"/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH(baseURL+"/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
