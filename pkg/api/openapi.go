// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Unstructured key value map containing arbitrary metadata
type Annotations map[string]interface{}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties `yaml:",inline"`
}

// Facts about a cluster object. Statically configured key/value pairs.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {
	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A cluster defition object.
// The Git repository is usually managed by the API and autogenerated.
// The sshDeployKey will be managed by Steward
type ClusterProperties struct {
	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Dynamic facts about a cluster object. Are periodically udpated by Project Syn and should not be set manually.
	DynamicFacts *DynamicClusterFacts `json:"dynamicFacts,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Git revision to use with the tenant configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	TenantGitRepoRevision *string `json:"tenantGitRepoRevision,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {
	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// Dynamic facts about a cluster object. Are periodically udpated by Project Syn and should not be set manually.
type DynamicClusterFacts map[string]interface{}

// Configuration Git repository, usually generated by the API
type GitRepo struct {
	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type Id string

// Inventory data of a cluster
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	ApiVersion string      `json:"apiVersion"`
	Oidc       *OIDCConfig `json:"oidc,omitempty"`
}

// OIDCConfig defines model for OIDCConfig.
type OIDCConfig struct {
	ClientId     string `json:"clientId"`
	DiscoveryUrl string `json:"discoveryUrl"`
}

// A reason for responses
type Reason struct {
	// The reason message
	Reason string `json:"reason"`
}

// Revision defines model for Revision.
type Revision struct {
	// Revision to use with a git repository.
	Revision *string `json:"revision,omitempty"`
}

// RevisionedGitRepo defines model for RevisionedGitRepo.
type RevisionedGitRepo struct {
	// Embedded struct due to allOf(#/components/schemas/GitRepo)
	GitRepo `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/Revision)
	Revision `yaml:",inline"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties `yaml:",inline"`
}

// TenantId defines model for TenantId.
type TenantId struct {
	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A tenant definition object.
// The Git repository is usually managed by the API and autogenerated.
// All properties except name are optional on creation.
type TenantProperties struct {
	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display name of the tenant
	DisplayName *string            `json:"displayName,omitempty"`
	GitRepo     *RevisionedGitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// Full URL of the global configuration git repo
	GlobalGitRepoURL *string `json:"globalGitRepoURL,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type ClusterIdParameter Id

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type TenantIdParameter Id

// A reason for responses
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {
	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody Cluster

// PutClusterJSONBody defines parameters for PutCluster.
type PutClusterJSONBody Cluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {
	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {
	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody Tenant

// PutTenantJSONBody defines parameters for PutTenant.
type PutTenantJSONBody Tenant

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// PutClusterJSONRequestBody defines body for PutCluster for application/json ContentType.
type PutClusterJSONRequestBody PutClusterJSONBody

// UpdateInventoryJSONRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantJSONRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// PutTenantJSONRequestBody defines body for PutTenant for application/json ContentType.
type PutTenantJSONRequestBody PutTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lieutenant API Root
	// (GET /)
	Discovery(ctx echo.Context) error
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates or creates a cluster
	// (PUT /clusters/{clusterId})
	PutCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates or creates a tenant
	// (PUT /tenants/{tenantId})
	PutTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Discovery converts echo context to params.
func (w *ServerInterfaceWrapper) Discovery(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Discovery(ctx)
	return err
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// PutCluster converts echo context to params.
func (w *ServerInterfaceWrapper) PutCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// PutTenant converts echo context to params.
func (w *ServerInterfaceWrapper) PutTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Discovery)
	router.GET(baseURL+"/clusters", wrapper.ListClusters)
	router.POST(baseURL+"/clusters", wrapper.CreateCluster)
	router.DELETE(baseURL+"/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET(baseURL+"/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH(baseURL+"/clusters/:clusterId", wrapper.UpdateCluster)
	router.PUT(baseURL+"/clusters/:clusterId", wrapper.PutCluster)
	router.GET(baseURL+"/docs", wrapper.Docs)
	router.GET(baseURL+"/healthz", wrapper.Healthz)
	router.GET(baseURL+"/install/steward.json", wrapper.InstallSteward)
	router.GET(baseURL+"/inventory", wrapper.QueryInventory)
	router.POST(baseURL+"/inventory", wrapper.UpdateInventory)
	router.GET(baseURL+"/openapi.json", wrapper.Openapi)
	router.GET(baseURL+"/tenants", wrapper.ListTenants)
	router.POST(baseURL+"/tenants", wrapper.CreateTenant)
	router.DELETE(baseURL+"/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET(baseURL+"/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH(baseURL+"/tenants/:tenantId", wrapper.UpdateTenant)
	router.PUT(baseURL+"/tenants/:tenantId", wrapper.PutTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
