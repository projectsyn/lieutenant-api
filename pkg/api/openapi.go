// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Unstructured key value map containing arbitrary metadata
type Annotations map[string]interface{}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties `yaml:",inline"`
}

// Facts about a cluster object. Statically configured key/value pairs.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A cluster defition object.
// The Git repository is usually managed by the API and autogenerated.
// The sshDeployKey will be managed by Steward
type ClusterProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Git revision to use with the tenant configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	TenantGitRepoRevision *string `json:"tenantGitRepoRevision,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// Configuration Git repository, usually generated by the API
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type Id string

// Inventory data of a cluster
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// A reason for responses
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Revision defines model for Revision.
type Revision struct {

	// Revision to use with a git repository.
	Revision *string `json:"revision,omitempty"`
}

// RevisionedGitRepo defines model for RevisionedGitRepo.
type RevisionedGitRepo struct {
	// Embedded struct due to allOf(#/components/schemas/GitRepo)
	GitRepo `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/Revision)
	Revision `yaml:",inline"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties `yaml:",inline"`
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A tenant definition object.
// The Git repository is usually managed by the API and autogenerated.
// All properties except name are optional on creation.
type TenantProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display name of the tenant
	DisplayName *string            `json:"displayName,omitempty"`
	GitRepo     *RevisionedGitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// Full URL of the global configuration git repo
	GlobalGitRepoURL *string `json:"globalGitRepoURL,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type ClusterIdParameter Id

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type TenantIdParameter Id

// A reason for responses
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody Cluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody Tenant

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryJSONRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantJSONRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clusters", wrapper.ListClusters)
	router.POST(baseURL+"/clusters", wrapper.CreateCluster)
	router.DELETE(baseURL+"/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET(baseURL+"/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH(baseURL+"/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET(baseURL+"/docs", wrapper.Docs)
	router.GET(baseURL+"/healthz", wrapper.Healthz)
	router.GET(baseURL+"/install/steward.json", wrapper.InstallSteward)
	router.GET(baseURL+"/inventory", wrapper.QueryInventory)
	router.POST(baseURL+"/inventory", wrapper.UpdateInventory)
	router.GET(baseURL+"/openapi.json", wrapper.Openapi)
	router.GET(baseURL+"/tenants", wrapper.ListTenants)
	router.POST(baseURL+"/tenants", wrapper.CreateTenant)
	router.DELETE(baseURL+"/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET(baseURL+"/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH(baseURL+"/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
