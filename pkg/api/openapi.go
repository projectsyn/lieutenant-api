// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Unstructured key value map containing arbitrary metadata
type Annotations map[string]interface{}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties `yaml:",inline"`
}

// Facts about a cluster object. Statically configured key/value pairs.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A cluster defition object.
// The Git repository is usually managed by the API and autogenerated.
// The sshDeployKey will be managed by Steward
type ClusterProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Dynamic facts about a cluster object. Are periodically udpated by Project Syn and should not be set manually.
	DynamicFacts *DynamicClusterFacts `json:"dynamicFacts,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Git revision to use with the tenant configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	TenantGitRepoRevision *string `json:"tenantGitRepoRevision,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// Dynamic facts about a cluster object. Are periodically udpated by Project Syn and should not be set manually.
type DynamicClusterFacts map[string]interface{}

// Configuration Git repository, usually generated by the API
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type Id string

// Inventory data of a cluster
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// A reason for responses
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Revision defines model for Revision.
type Revision struct {

	// Revision to use with a git repository.
	Revision *string `json:"revision,omitempty"`
}

// RevisionedGitRepo defines model for RevisionedGitRepo.
type RevisionedGitRepo struct {
	// Embedded struct due to allOf(#/components/schemas/GitRepo)
	GitRepo `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/Revision)
	Revision `yaml:",inline"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties `yaml:",inline"`
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A tenant definition object.
// The Git repository is usually managed by the API and autogenerated.
// All properties except name are optional on creation.
type TenantProperties struct {

	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display name of the tenant
	DisplayName *string            `json:"displayName,omitempty"`
	GitRepo     *RevisionedGitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// Full URL of the global configuration git repo
	GlobalGitRepoURL *string `json:"globalGitRepoURL,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type ClusterIdParameter Id

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type TenantIdParameter Id

// A reason for responses
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody Cluster

// PutClusterJSONBody defines parameters for PutCluster.
type PutClusterJSONBody Cluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody Tenant

// PutTenantJSONBody defines parameters for PutTenant.
type PutTenantJSONBody Tenant

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// PutClusterJSONRequestBody defines body for PutCluster for application/json ContentType.
type PutClusterJSONRequestBody PutClusterJSONBody

// UpdateInventoryJSONRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantJSONRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// PutTenantJSONRequestBody defines body for PutTenant for application/json ContentType.
type PutTenantJSONRequestBody PutTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates or creates a cluster
	// (PUT /clusters/{clusterId})
	PutCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates or creates a tenant
	// (PUT /tenants/{tenantId})
	PutTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// PutCluster converts echo context to params.
func (w *ServerInterfaceWrapper) PutCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// PutTenant converts echo context to params.
func (w *ServerInterfaceWrapper) PutTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clusters", wrapper.ListClusters)
	router.POST(baseURL+"/clusters", wrapper.CreateCluster)
	router.DELETE(baseURL+"/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET(baseURL+"/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH(baseURL+"/clusters/:clusterId", wrapper.UpdateCluster)
	router.PUT(baseURL+"/clusters/:clusterId", wrapper.PutCluster)
	router.GET(baseURL+"/docs", wrapper.Docs)
	router.GET(baseURL+"/healthz", wrapper.Healthz)
	router.GET(baseURL+"/install/steward.json", wrapper.InstallSteward)
	router.GET(baseURL+"/inventory", wrapper.QueryInventory)
	router.POST(baseURL+"/inventory", wrapper.UpdateInventory)
	router.GET(baseURL+"/openapi.json", wrapper.Openapi)
	router.GET(baseURL+"/tenants", wrapper.ListTenants)
	router.POST(baseURL+"/tenants", wrapper.CreateTenant)
	router.DELETE(baseURL+"/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET(baseURL+"/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH(baseURL+"/tenants/:tenantId", wrapper.UpdateTenant)
	router.PUT(baseURL+"/tenants/:tenantId", wrapper.PutTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
