// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Unstructured key value map containing arbitrary metadata
type Annotations map[string]interface{}

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterTenant)
	ClusterTenant `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties `yaml:",inline"`
}

// Facts about a cluster object. Statically configured key/value pairs.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {
	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A cluster defition object.
// The Git repository is usually managed by the API and autogenerated.
// The sshDeployKey will be managed by Steward
type ClusterProperties struct {
	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Dynamic facts about a cluster object. Are periodically udpated by Project Syn and should not be set manually.
	DynamicFacts *DynamicClusterFacts `json:"dynamicFacts,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// URL to fetch install manifests for Steward cluster agent. This will only be set if the cluster's token is still valid.
	InstallURL *string `json:"installURL,omitempty"`

	// Git revision to use with the tenant configruation git repository.
	// This takes precedence over the revision configured on the Tenant.
	TenantGitRepoRevision *string `json:"tenantGitRepoRevision,omitempty"`
}

// ClusterTenant defines model for ClusterTenant.
type ClusterTenant struct {
	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// Dynamic facts about a cluster object. Are periodically udpated by Project Syn and should not be set manually.
type DynamicClusterFacts map[string]interface{}

// Configuration Git repository, usually generated by the API
type GitRepo struct {
	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Specifies if a repo should be managed by the git controller. A value of 'unmanaged' means it's not manged by the controller
	Type *string `json:"type,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type Id string

// Inventory data of a cluster
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	ApiVersion string      `json:"apiVersion"`
	Oidc       *OIDCConfig `json:"oidc,omitempty"`
}

// OIDCConfig defines model for OIDCConfig.
type OIDCConfig struct {
	ClientId     string `json:"clientId"`
	DiscoveryUrl string `json:"discoveryUrl"`
}

// A reason for responses
type Reason struct {
	// The reason message
	Reason string `json:"reason"`
}

// Revision defines model for Revision.
type Revision struct {
	// Revision to use with a git repository.
	Revision *string `json:"revision,omitempty"`
}

// RevisionedGitRepo defines model for RevisionedGitRepo.
type RevisionedGitRepo struct {
	// Embedded struct due to allOf(#/components/schemas/GitRepo)
	GitRepo `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/Revision)
	Revision `yaml:",inline"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties `yaml:",inline"`
}

// TenantId defines model for TenantId.
type TenantId struct {
	// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
	Id Id `json:"id"`
}

// A tenant definition object.
// The Git repository is usually managed by the API and autogenerated.
// All properties except name are optional on creation.
type TenantProperties struct {
	// Unstructured key value map containing arbitrary metadata
	Annotations *Annotations `json:"annotations,omitempty"`

	// Display name of the tenant
	DisplayName *string            `json:"displayName,omitempty"`
	GitRepo     *RevisionedGitRepo `json:"gitRepo,omitempty"`

	// Git revision to use with the global configruation git repository.
	GlobalGitRepoRevision *string `json:"globalGitRepoRevision,omitempty"`

	// Full URL of the global configuration git repo
	GlobalGitRepoURL *string `json:"globalGitRepoURL,omitempty"`
}

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type ClusterIdParameter Id

// A unique object identifier string. Automatically generated by the API on creation (in the form "<letter>-<adjective>-<noun>-<digits>" where all letters are lowercase, max 63 characters in total).
type TenantIdParameter Id

// A reason for responses
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {
	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody Cluster

// PutClusterJSONBody defines parameters for PutCluster.
type PutClusterJSONBody Cluster

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {
	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {
	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody Tenant

// PutTenantJSONBody defines parameters for PutTenant.
type PutTenantJSONBody Tenant

// CreateClusterJSONRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// PutClusterJSONRequestBody defines body for PutCluster for application/json ContentType.
type PutClusterJSONRequestBody PutClusterJSONBody

// UpdateInventoryJSONRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantJSONRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// PutTenantJSONRequestBody defines body for PutTenant for application/json ContentType.
type PutTenantJSONRequestBody PutTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lieutenant API Root
	// (GET /)
	Discovery(ctx echo.Context) error
	// Returns a list of clusters
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates or creates a cluster
	// (PUT /clusters/{clusterId})
	PutCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API documentation
	// (GET /docs)
	Docs(ctx echo.Context) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// OpenAPI JSON spec
	// (GET /openapi.json)
	Openapi(ctx echo.Context) error
	// Returns a list of tenants
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates or creates a tenant
	// (PUT /tenants/{tenantId})
	PutTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Discovery converts echo context to params.
func (w *ServerInterfaceWrapper) Discovery(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Discovery(ctx)
	return err
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// PutCluster converts echo context to params.
func (w *ServerInterfaceWrapper) PutCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCluster(ctx, clusterId)
	return err
}

// Docs converts echo context to params.
func (w *ServerInterfaceWrapper) Docs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Docs(ctx)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// Openapi converts echo context to params.
func (w *ServerInterfaceWrapper) Openapi(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Openapi(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// PutTenant converts echo context to params.
func (w *ServerInterfaceWrapper) PutTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "tenantId", runtime.ParamLocationPath, ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTenant(ctx, tenantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Discovery)
	router.GET(baseURL+"/clusters", wrapper.ListClusters)
	router.POST(baseURL+"/clusters", wrapper.CreateCluster)
	router.DELETE(baseURL+"/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET(baseURL+"/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH(baseURL+"/clusters/:clusterId", wrapper.UpdateCluster)
	router.PUT(baseURL+"/clusters/:clusterId", wrapper.PutCluster)
	router.GET(baseURL+"/docs", wrapper.Docs)
	router.GET(baseURL+"/healthz", wrapper.Healthz)
	router.GET(baseURL+"/install/steward.json", wrapper.InstallSteward)
	router.GET(baseURL+"/inventory", wrapper.QueryInventory)
	router.POST(baseURL+"/inventory", wrapper.UpdateInventory)
	router.GET(baseURL+"/openapi.json", wrapper.Openapi)
	router.GET(baseURL+"/tenants", wrapper.ListTenants)
	router.POST(baseURL+"/tenants", wrapper.CreateTenant)
	router.DELETE(baseURL+"/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET(baseURL+"/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH(baseURL+"/tenants/:tenantId", wrapper.UpdateTenant)
	router.PUT(baseURL+"/tenants/:tenantId", wrapper.PutTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
