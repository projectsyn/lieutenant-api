// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Cluster defines model for Cluster.
type Cluster struct {
	// Embedded struct due to allOf(#/components/schemas/ClusterId)
	ClusterId
	// Embedded struct due to allOf(#/components/schemas/ClusterProperties)
	ClusterProperties
}

// ClusterFacts defines model for ClusterFacts.
type ClusterFacts map[string]interface{}

// ClusterId defines model for ClusterId.
type ClusterId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// ClusterProperties defines model for ClusterProperties.
type ClusterProperties struct {

	// Display Name of the cluster
	DisplayName *string `json:"displayName,omitempty"`

	// Facts about a cluster object. Statically configured key/value pairs.
	Facts *ClusterFacts `json:"facts,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// Id of the tenant this cluster belongs to
	Tenant string `json:"tenant"`
}

// GitRepo defines model for GitRepo.
type GitRepo struct {

	// SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
	DeployKey *string `json:"deployKey,omitempty"`

	// SSH known hosts of the git server (multiline possible for multiple keys)
	HostKeys *string `json:"hostKeys,omitempty"`

	// Full URL of the git repo
	Url *string `json:"url,omitempty"`
}

// Id defines model for Id.
type Id string

// Inventory defines model for Inventory.
type Inventory struct {
	Cluster   string                  `json:"cluster"`
	Inventory *map[string]interface{} `json:"inventory,omitempty"`
}

// Reason defines model for Reason.
type Reason struct {

	// The reason message
	Reason string `json:"reason"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Embedded struct due to allOf(#/components/schemas/TenantId)
	TenantId
	// Embedded struct due to allOf(#/components/schemas/TenantProperties)
	TenantProperties
}

// TenantId defines model for TenantId.
type TenantId struct {

	// A unique object identifier string. Automatically generated by the API on creation.
	Id Id `json:"id"`
}

// TenantProperties defines model for TenantProperties.
type TenantProperties struct {

	// Display name of the tenant
	DisplayName *string `json:"displayName,omitempty"`

	// Configuration Git repository, usually generated by the API
	GitRepo *GitRepo `json:"gitRepo,omitempty"`

	// The tenant this tenant belongs to
	Tenant *string `json:"tenant,omitempty"`
}

// ClusterIdParameter defines model for ClusterIdParameter.
type ClusterIdParameter Id

// TenantIdParameter defines model for TenantIdParameter.
type TenantIdParameter Id

// Default defines model for Default.
type Default Reason

// ListClustersParams defines parameters for ListClusters.
type ListClustersParams struct {

	// Filter clusters by tenant id
	Tenant *string `json:"tenant,omitempty"`
}

// CreateClusterJSONBody defines parameters for CreateCluster.
type CreateClusterJSONBody ClusterProperties

// InstallStewardParams defines parameters for InstallSteward.
type InstallStewardParams struct {

	// Initial bootstrap token
	Token *string `json:"token,omitempty"`
}

// QueryInventoryParams defines parameters for QueryInventory.
type QueryInventoryParams struct {

	// InfluxQL query string
	Q *string `json:"q,omitempty"`
}

// UpdateInventoryJSONBody defines parameters for UpdateInventory.
type UpdateInventoryJSONBody Inventory

// CreateTenantJSONBody defines parameters for CreateTenant.
type CreateTenantJSONBody TenantProperties

// CreateClusterRequestBody defines body for CreateCluster for application/json ContentType.
type CreateClusterJSONRequestBody CreateClusterJSONBody

// UpdateInventoryRequestBody defines body for UpdateInventory for application/json ContentType.
type UpdateInventoryJSONRequestBody UpdateInventoryJSONBody

// CreateTenantRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody CreateTenantJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of clusters.
	// (GET /clusters)
	ListClusters(ctx echo.Context, params ListClustersParams) error
	// Creates a new cluster
	// (POST /clusters)
	CreateCluster(ctx echo.Context) error
	// Deletes a cluster
	// (DELETE /clusters/{clusterId})
	DeleteCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Returns all values of a cluster
	// (GET /clusters/{clusterId})
	GetCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// Updates a cluster
	// (PATCH /clusters/{clusterId})
	UpdateCluster(ctx echo.Context, clusterId ClusterIdParameter) error
	// API health check
	// (GET /healthz)
	Healthz(ctx echo.Context) error
	// Returns the Steward JSON installation manifest
	// (GET /install/steward.json)
	InstallSteward(ctx echo.Context, params InstallStewardParams) error
	// Returns inventory data according to query
	// (GET /inventory)
	QueryInventory(ctx echo.Context, params QueryInventoryParams) error
	// Write inventory data
	// (POST /inventory)
	UpdateInventory(ctx echo.Context) error
	// Returns a list of tenants.
	// (GET /tenants)
	ListTenants(ctx echo.Context) error
	// Creates a new tenant
	// (POST /tenants)
	CreateTenant(ctx echo.Context) error
	// Deletes a tenant
	// (DELETE /tenants/{tenantId})
	DeleteTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Returns all values of a tenant
	// (GET /tenants/{tenantId})
	GetTenant(ctx echo.Context, tenantId TenantIdParameter) error
	// Updates a tenant
	// (PATCH /tenants/{tenantId})
	UpdateTenant(ctx echo.Context, tenantId TenantIdParameter) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListClusters converts echo context to params.
func (w *ServerInterfaceWrapper) ListClusters(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClustersParams
	// ------------- Optional query parameter "tenant" -------------
	if paramValue := ctx.QueryParam("tenant"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tenant", ctx.QueryParams(), &params.Tenant)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenant: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListClusters(ctx, params)
	return err
}

// CreateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCluster(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCluster(ctx)
	return err
}

// DeleteCluster converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCluster(ctx, clusterId)
	return err
}

// GetCluster converts echo context to params.
func (w *ServerInterfaceWrapper) GetCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCluster(ctx, clusterId)
	return err
}

// UpdateCluster converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCluster(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clusterId" -------------
	var clusterId ClusterIdParameter

	err = runtime.BindStyledParameter("simple", false, "clusterId", ctx.Param("clusterId"), &clusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clusterId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCluster(ctx, clusterId)
	return err
}

// Healthz converts echo context to params.
func (w *ServerInterfaceWrapper) Healthz(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Healthz(ctx)
	return err
}

// InstallSteward converts echo context to params.
func (w *ServerInterfaceWrapper) InstallSteward(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstallStewardParams
	// ------------- Optional query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InstallSteward(ctx, params)
	return err
}

// QueryInventory converts echo context to params.
func (w *ServerInterfaceWrapper) QueryInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryInventoryParams
	// ------------- Optional query parameter "q" -------------
	if paramValue := ctx.QueryParam("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryInventory(ctx, params)
	return err
}

// UpdateInventory converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInventory(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateInventory(ctx)
	return err
}

// ListTenants converts echo context to params.
func (w *ServerInterfaceWrapper) ListTenants(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTenants(ctx)
	return err
}

// CreateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTenant(ctx echo.Context) error {
	var err error

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTenant(ctx)
	return err
}

// DeleteTenant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTenant(ctx, tenantId)
	return err
}

// GetTenant converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTenant(ctx, tenantId)
	return err
}

// UpdateTenant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenantId" -------------
	var tenantId TenantIdParameter

	err = runtime.BindStyledParameter("simple", false, "tenantId", ctx.Param("tenantId"), &tenantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenantId: %s", err))
	}

	ctx.Set("BearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateTenant(ctx, tenantId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clusters", wrapper.ListClusters)
	router.POST("/clusters", wrapper.CreateCluster)
	router.DELETE("/clusters/:clusterId", wrapper.DeleteCluster)
	router.GET("/clusters/:clusterId", wrapper.GetCluster)
	router.PATCH("/clusters/:clusterId", wrapper.UpdateCluster)
	router.GET("/healthz", wrapper.Healthz)
	router.GET("/install/steward.json", wrapper.InstallSteward)
	router.GET("/inventory", wrapper.QueryInventory)
	router.POST("/inventory", wrapper.UpdateInventory)
	router.GET("/tenants", wrapper.ListTenants)
	router.POST("/tenants", wrapper.CreateTenant)
	router.DELETE("/tenants/:tenantId", wrapper.DeleteTenant)
	router.GET("/tenants/:tenantId", wrapper.GetTenant)
	router.PATCH("/tenants/:tenantId", wrapper.UpdateTenant)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
