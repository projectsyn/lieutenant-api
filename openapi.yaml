openapi: '3.0.2'
info:
  title: Lieutenant API
  description: Project Syn Management API
  version: 0.0.1
  license:
    name: BSD 3-Clause License
    url: https://choosealicense.com/licenses/bsd-3-clause/
servers:
  - url: https://api.syn.vshn.ch/api
    description: Project Syn Lieutenant Production API
  - url: https://api-test.syn.vshn.ch/api
    description: Project Syn Lieutenant Test API
  - url: http://localhost:4010
components:
  schemas:
    Id:
      type: string
      description: A unique object identifier string. Automatically generated by the API on creation.
      readOnly: true
    TenantProperties:
      type: object
      description: |
        A tenant defition object.
        It can belong to another tenant to allow for tenant hierarchies.
        The Git repository is usually managed by the API and autogenerated.
        All properties except name are optional on creation.
      properties:
        name:
          type: string
          description: Identification of the tenant (shortname or slug)
          example: acmecorp
        displayName:
          type: string
          description: Display name of the tenant
          example: Acme Corp.
        tenant:
          type: string
          description: The tenant this tenant belongs to
          example: multicorp
          nullable: true
        gitRepo:
          type: string
          description: Tenant configuration Git repository, usually generated by the API
          example: https://github.com/acmecorp/commodore-config.git
    TenantId:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
    TenantRequiredProperties:
      type: object
      required:
      - name
    Tenant:
      allOf:
        - $ref: '#/components/schemas/TenantId'
        - $ref: '#/components/schemas/TenantProperties'
        - $ref: '#/components/schemas/TenantRequiredProperties'
    ClusterProperties:
      type: object
      description: |
        A cluster defition object.
        The Git repository is usually managed by the API and autogenerated.
        The sshDeployKey will be managed by Steward
      properties:
        apiEndpoint:
          type: string
          description: URL to Kubernetes API endpoint of the registered Kubernetes cluster
          example: https://cluster-api:8443
        displayName:
          type: string
          description: Display Name of the cluster
          example: My very important cluster
        facts:
          $ref: '#/components/schemas/ClusterFacts'
        gitRepo:
          type: string
          description: Cluster configuration catalog Git repository, usually generated by the API
          example: https://github.com/acmecorp/gitops-mycluster.git
        name:
          type: string
          description: Identification of the cluster (shortname or slug)
          example: mycluster
        sshDeployKey:
          type: string
          description: SSH public key / deploy key for clusterconfiguration catalog Git repository. This property is managed by Steward.
          example: |
            ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDG9a5WwLuwcxMRydNqI4ofuzXucrBKpGOvPV9PO4guj
        tenant:
          type: string
          description: Id of the tenant this cluster belongs to
          example: aezoo6
    ClusterId:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
    ClusterRequiredProperties:
      type: object
      required:
      - name
      - tenant
    ClusterFacts:
      type: object
      description: Facts about a cluster object. Statically configured key/value pairs.
      example:
        distribution: openshift4
        cloud: aws
        region: eu-west-1
    Cluster:
      allOf:
        - $ref: '#/components/schemas/ClusterId'
        - $ref: '#/components/schemas/ClusterProperties'
        - $ref: '#/components/schemas/ClusterRequiredProperties'
    Reason:
      type: object
      description: A reason for responses
      properties:
        code:
          type: string
          description: A reason code
          example: '42'
        reason:
          type: string
          description: The reason message
          example: Because of reasons
    Inventory:
      type: object
      description: Inventory data of a cluster
      required:
      - cluster
      properties:
        cluster:
          type: string
        inventory:
          type: object
          additionalProperties: {}
  requestBodies:
    CreateTenant:
      description: Create a new tenant
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/TenantProperties'
            - $ref: '#/components/schemas/TenantRequiredProperties'
    CreateCluster:
      description: Create a new Cluster
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ClusterProperties'
            - $ref: '#/components/schemas/ClusterRequiredProperties'
    StoreInventory:
      description: Inventory data of a cluster
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Inventory'
  responses:
    Default:
      description: A default response with a reason.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reason'
  parameters:
    TenantId:
      name: tenantId
      in: path
      required: true
      description: Distinct id of the tenant.
      schema:
        $ref: '#/components/schemas/Id'
    ClusterId:
      name: clusterId
      in: path
      required: true
      description: Distinct id of the cluster.
      schema:
        $ref: '#/components/schemas/Id'
tags:
  - name: tenant
    description: Management of tenants
  - name: cluster
    description: Management of clusters
  - name: bootstrapping
    description: Cluster bootstrapping
  - name: inventory
    description: Cluster inventory time based data
  - name: system
    description: API system
paths:
  /tenants:
    get:
      summary: Returns a list of tenants.
      description: List of all tenants available in the API
      tags:
        - tenant
      responses:
        '200':
          description: Tenant listing. Empty array if no tenants available.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
                example:
                - id: aezoo6
                  name: bigcorp
                  displayName: Big Corp.
                  gitRepo: https://github.com/bigcorp/commodore-config.git
                - id: os3ce3
                  name: acmecorp
                  displayName: Acme Corp. (Subtenant of Big Corp)
                  tenant: aezoo6
                  gitRepo: https://github.com/acmecorp/commodore-config.git
        default:
          $ref: '#/components/responses/Default'
    post:
      summary: Creates a new tenant
      description: |
        Create a tenant in the API.
        * ID is generated by the API (6 lowercase letters and numbers mixed)
        * Generates the `Tenant` object in the same namespace as the API runs
        * The customer config Git repository (the `<GitRepoSpec>`) is automatically
          generated based on default configuration or using the provided values
        * If `gitRepo` is already set on creation, no `<GitRepoSpec>` will be added.
      tags:
        - tenant
      requestBody:
        required: true
        $ref: '#/components/requestBodies/CreateTenant'
      responses:
        '201':
          description: Tenant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
              example:
                id: aezoo6
                name: acmecorp
                displayName: Acme Corp.
                tenant: multicorp
                gitRepo: https://github.com/acmecorp/commodore-config.git
        '400':
          description: Tenant cannot be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '405':
          description: Tenant already exists
        default:
          $ref: '#/components/responses/Default'
  /tenants/{tenantId}:
    get:
      summary: Returns all values of a tenant
      tags:
        - tenant
      parameters:
        - $ref: '#/components/parameters/TenantId'
      responses:
        '200':
          description: Tenant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '404':
          description: A tenant with the specified id was not found.
        default:
          $ref: '#/components/responses/Default'
    patch:
      summary: Updates a tenant
      tags:
        - tenant
      parameters:
        - $ref: '#/components/parameters/TenantId'
      requestBody:
        description: Update tenant with properties to be changed (RFC 7396)
        required: true
        content:
          application/merge-patch+json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Tenant'
                - type: object
                  properties:
                    displayName:
                      nullable: true
      responses:
        '204':
          description: Tenant updated
        '403':
          description: Tenant update forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        default:
          $ref: '#/components/responses/Default'
    delete:
      summary: Deletes a tenant
      tags:
        - tenant
      responses:
        '204':
          description: Tenant deleted
        '403':
          description: Tenant deletion forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        default:
          $ref: '#/components/responses/Default'
  /clusters:
    get:
      summary: Returns a list of clusters.
      description: List of clusters available in the API
      tags:
        - cluster
      parameters:
        - in: query
          name: tenant
          schema:
            type: string
          description: Filter clusters by tenant id
          example: aezoo6
      responses:
        '200':
          description: Cluster listing. Empty array if no tenants available.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cluster'
        default:
          $ref: '#/components/responses/Default'
    post:
      summary: Creates a new cluster
      description: |
        Create a cluster in the API

        * ID is generated by the API (6 lowercase letters and numbers mixed)
        * Checks if the tenant exists before creating the object, otherwise fails
        * Generates the `Cluster` object and some of it's properties:
          * `<GitRepoSpec>`
          * `bootstrapToken` values
      tags:
        - cluster
      requestBody:
        required: true
        $ref: '#/components/requestBodies/CreateCluster'
      responses:
        '201':
          description: Cluster created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        '400':
          description: Cluster cannot be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        '405':
          description: Cluster already exists
        default:
          $ref: '#/components/responses/Default'
  /clusters/{clusterId}:
    get:
      summary: Returns all values of a cluster
      tags:
        - cluster 
      parameters:
        - $ref: '#/components/parameters/ClusterId'
      responses:
        '200':
          description: Cluster found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        '404':
          description: A cluster with the specified id was not found.
        default:
          $ref: '#/components/responses/Default'
    patch:
      summary: Updates a cluster
      tags:
        - cluster
      parameters:
        - $ref: '#/components/parameters/ClusterId'
      requestBody:
        description: Update cluster with properties to be changed (RFC 7396)
        required: true
        content:
          application/merge-patch+json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Cluster'
                - type: object
                  properties:
                    displayName:
                      nullable: true
      responses:
        '204':
          description: Cluster updated
        '403':
          description: Cluster update forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        default:
          $ref: '#/components/responses/Default'
    delete:
      summary: Deletes a cluster
      tags:
        - cluster
      responses:
        '204':
          description: Cluster deleted
        '403':
          description: Cluster deletion forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reason'
        default:
          $ref: '#/components/responses/Default'
  /install/steward.json:
    get:
      summary: Returns the Steward JSON installation manifest
      description: |
        Autogenerated JSON containing all the needed parameters for having Steward up and running
        * Iterates through all available Cluster objects to find the object matching the token in the field `spec.bootstrapToken.token`
        * Checks if the token is valid (fields `spec.bootstrapToken.valid` and field `spec.bootstrapToken.validUntil`)
        * If valid, generates the installation JSON based on a template to install Steward in the cluster
        * If valid and JSON could be successfully delivered, set the field `spec.bootstrapToken.valid` to `false`
      tags:
        - bootstrapping
      parameters:
        - in: query
          name: token
          schema:
            type: string
          description: Initial bootstrap token
      responses:
        '200':
          description: Cluster found and token valid
        '401':
          description: Token invalid
        '404':
          description: Cluster not found
        default:
          $ref: '#/components/responses/Default'
  /inventory:
    get:
      summary: Returns inventory data according to query
      tags:
        - inventory
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: InfluxQL query string
          example: SELECT LAST(version,cloud) FROM mycluster
      responses:
        '200':
          description: Query succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        default:
          $ref: '#/components/responses/Default'
    post:
      summary: Write inventory data
      tags:
        - inventory
      requestBody:
        required: true
        $ref: '#/components/requestBodies/StoreInventory'
      responses:
        '200':
          description: Inventory data stored
        default:
          $ref: '#/components/responses/Default'
  /healthz:
    get:
      summary: API health check
      tags:
       - system
      responses:
        '200':
          description: All is fine
          content:
            text/plain:
              schema:
                type: string
                example: ok
        default:
          $ref: '#/components/responses/Default'
